head	1.6;
access;
symbols;
locks; strict;
comment	@-- @;


1.6
date	2008.11.23.21.33.20;	author baker;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.23.01.54.28;	author baker;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.20.18.49.43;	author baker;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.19.14.25.53;	author baker;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.19.12.04.57;	author baker;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.16.13.36.54;	author baker;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@with Events;
with Virtual_Times; use Virtual_Times; -- for type Time
with Ada.Text_IO; use Ada.Text_IO;
package Simulator is

   procedure Initialize;

   procedure Run (Latest_Stop_Time : Time);
   procedure Run (Normal_Stop_Time, Latest_Stop_Time : Time);
   --  Call this after queuing up initial events, like task starts.

   procedure Schedule_Event (E : in out Events.Object'Class);
   --  inserts E into the event queue
   --  at the associated time

   procedure Cancel_Event (E : in out Events.Object'Class);
   --  removes E from the event queue;
   --  You want to do this whenever you change the associated time

   procedure Set_Every_Clock_Event (E : in out Events.Object'Class);
   --  can arrange for one event to be triggered every time
   --  that the simulated time advances

   Simulation_Done : exception;
   --  Raise this to terminate the simulation immediately.

   procedure Stop;
   --  will stop the simulation at the next call to Check_time.

   procedure Check_Time;
   --  will stop the simulation if the current time > Latest_Stop Time.

   function Current_Time return Time;

   procedure Show_Event_Queue (F : File_Type; Long : Boolean := False);
   --  prints out event queue contents

end Simulator;
@


1.5
log
@*** empty log message ***
@
text
@d6 2
@


1.4
log
@*** empty log message ***
@
text
@a5 3
   Simulation_Done : exception;
   --  raise this to terminate the simulation early

d7 2
a8 1
   --  call this after queuing up initial events, like task starts
d11 1
a11 1
   --  inserts E in the event queue
d16 1
a16 1
   --  you want to do this whenever you change the associated time
d22 3
d26 4
a29 1
   --  will stop the simulation, before Stop_Time.
d34 1
a34 1
   --  print out event queue contents
@


1.3
log
@*** empty log message ***
@
text
@d3 1
d9 1
a9 1
   procedure Run;
d24 3
d29 3
@


1.2
log
@*** empty log message ***
@
text
@a22 2
   procedure Put_Line (Message : String);

@


1.1
log
@Initial revision
@
text
@d2 1
d5 2
a6 1
   procedure Open (Log_Filename : String);
a7 1
   function Current_Time return Events.Time;
d9 1
d11 3
a13 2
   procedure Schedule_Event (E : Events.Object'Class);
   procedure Cancel_Event (E : Events.Object'Class);
d15 3
a17 1
   procedure Every_Clock_Event (E : Events.Object'Class);
d19 7
a25 1
   procedure Log_Message (Message : String);
@
