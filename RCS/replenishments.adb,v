head	1.5;
access;
symbols;
locks; strict;
comment	@-- @;


1.5
date	2008.11.24.02.05.39;	author baker;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.23.01.54.28;	author baker;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.21.23.10.36;	author baker;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.20.22.18.50;	author baker;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.19.12.04.57;	author baker;	state Exp;
branches;
next	;


desc
@@


1.5
log
@*** empty log message ***
@
text
@--  $Id: replenishments.adb,v 1.4 2008/11/23 01:54:28 baker Exp baker $

with Error_Log; use Error_Log;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Strings; use Ada.Strings;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
package body Replenishments is
   use Queues;

   function ">" (Left, Right: R_Info) return Boolean is
   begin
      return Left.R_Time >= Right.R_Time;
   end ">";

   procedure Merge_R_Queue
      (Q : in out Queues.Object;
       Now : in Time) is
      T, R : R_Info;
   begin
      pragma Assert (not Is_Empty (Q));
      --  combine all currently available replenishments
      R := Q.Front_Of;
      T.R_Time := Now;
      T.R_Amount := 0;
      while not Q.Is_Empty and then
        Q.Front_Of.R_Time <= Now loop
        T.R_Amount := T.R_Amount + Q.Front_Of.R_Amount;
        Q.Pop;
      end loop;
      Q.Add (T);
   end Merge_R_Queue;

   procedure Check_R_Sum
      (Q : in out Queues.Object;
       Budget : in Time;
       Msg: String) is
      Total : Time := 0;
      procedure Check_One (R : R_Info) is
      begin
         Total := Total + R.R_Amount;
      end Check_One;
      procedure Check_All is new
        Queues.For_All (Check_One);
   begin
      pragma Assert (not Q.Is_Empty);
      Check_All (Q);
      if Total /= Budget then
         Put_Line (Log, "Check_R_Sum failure: total =" &
                     Time'Image (Total) & " budget = " &
                     Time'Image (Budget) & " at " & Msg);
         Show_R_Queue (Q);
         New_Line (Log);
         pragma Assert (False);
      end if;
   end Check_R_Sum;

   procedure Show_R_Queue
      (Q : in Queues.Object) is
      Total : Time := 0;
      procedure Show_One (R : R_Info) is
      begin
         Put (Log, '{' & Trim (Time'Image (R.R_Time), Left)
                &  Time'Image (R.R_Amount) & '}');
      end Show_One;
      procedure Show_All is new
        Replenishments.Queues.For_All (Show_One);
   begin
      Show_All (Q);
   end Show_R_Queue;

end Replenishments;

@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
--  $Id: replenishments.adb,v 1.3 2008/11/21 23:10:36 baker Exp baker $
d27 1
a27 1
        T.R_Time := T.R_Time + Q.Front_Of.R_Time;
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
--  $Id: replenishments.adb,v 1.2 2008/11/20 22:18:50 baker Exp baker $
d5 2
d8 1
d15 18
d45 1
d47 8
a54 1
      pragma Assert (Total = Budget, Msg);
d58 1
a58 3
      (Q : in Queues.Object;
       Msg: String;
       Threshold : Integer) is
d62 2
a63 2
         Put (Log, '[' & Time'Image (R.R_Time)
                &  Time'Image (R.R_Amount) & ']');
d68 1
a68 5
      if Debug_Level > Threshold then
         Put (Log, ' ');
         Show_All (Q);
         Put_Line (Log, ' ' &  Msg);
      end if;
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
--  $Id: replenishments.adb,v 1.1 2008/11/19 12:04:57 baker Exp baker $
d3 2
d25 1
a25 1
      pragma Assert (Total = Sum, Msg);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
--  $Id$
d4 1
d9 37
@
