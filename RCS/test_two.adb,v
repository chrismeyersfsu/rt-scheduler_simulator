head	1.4;
access;
symbols;
locks
	baker:1.4; strict;
comment	@-- @;


1.4
date	2008.11.23.21.33.20;	author baker;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.23.01.54.28;	author baker;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.21.23.10.36;	author baker;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.20.22.18.50;	author baker;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@-- $Id: test_two.adb,v 1.3 2008/11/23 01:54:28 baker Exp baker $

--  This is a second test program for simulation packages.
--  It tests one periodic and one aperiodic task.

with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;
with Ada.Strings; use Ada.Strings;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Error_Log; use Error_Log;
with Tasks;
with Simulator;
with Threads;
with Threads.Sched_DSS;
with Workload_Models;
with Aperiodic_Server_Parameters; use Aperiodic_Server_Parameters;
with Aperiodic_Workloads;
with Random_Tools;
with Stats;
with Periodic_Workloads;
with Threads.Sched_EDF;

procedure Test_Two is

   --  Aperiodic tasks

   subtype AP_Range is Integer range 1 .. 1;

   Aperiodic_Task : aliased Tasks.Task_Object;
   Aperiodic_Load : aliased Aperiodic_Workloads.Object;

   Aperiodic_Policy : aliased Threads.Sched_DSS.Object;

   --  Periodic tasks

   subtype P_Range is Integer range 1 .. 1;

   Periodic_Task : aliased Tasks.Task_Object;
   Periodic_Load : aliased Periodic_Workloads.Object;
   Periodic_Policy : aliased Threads.Sched_EDF.Object;

   Test_Name : constant String := "test_two";

begin

   Error_Log.Open (Test_Name);
   Error_Log.Debug_Level := 3;

   --  start the pseudo-random number generator that
   --  determines the "random" events in the simulation

   Random_Tools.Start (3, 5, 7, 11, False);

   Simulator.Initialize;

   --  set up one workload model object and one
   --  scheduling policy object per aperiodic task

   Aperiodic_Load.Bind_Parms
     ((Mean_Interarrival_Time => 3.0, Mean_Execution_Time => 2.0));
   Aperiodic_Policy.Bind_Parms
     ((Budget => 1, Budget_Interval => 2));
   Tasks.Bind
     (Aperiodic_Task'Unchecked_Access,
      M => Aperiodic_Load'Unchecked_Access,
      P => Aperiodic_Policy'Unchecked_Access,
      Name => "A1");

   Periodic_Load.Bind_Parms
     ((Period => 5, Deadline => 4, WCET => 2));
   Tasks.Bind
     (Periodic_Task'Unchecked_Access,
      M => Periodic_Load'Unchecked_Access,
      P => Periodic_Policy'Unchecked_Access,
      Name => "P1");

   --  initialize/reset the tasks,
   --  and thereby everything that depends on them

   Tasks.Initialize;

   Simulator.Run (Normal_Stop_Time => 10,
                  Latest_Stop_Time => 20);

   declare
      S : Stats.Data := Tasks.Get_Stats (Aperiodic_Task);
   begin
      Put ("Aperiodic Max_Resp_Time    = ");
      Put (Integer (S.Max_Resp_Time));
      New_Line;
      Put ("Aperiodic Total_Resp_Time  = ");
      Put (Integer (S.Total_Resp_Time));
      New_Line;
      Put ("Aperiodic Job_Count        = ");
      Put (Integer (S.Job_Count));
      New_Line;
      Put ("Aperiodic Missed_Deadlines = ");
      Put (Integer (S.Missed_Deadlines));
      New_Line;
   end;

   declare
      S : Stats.Data := Tasks.Get_Stats (Periodic_Task);
   begin
      Put ("Periodic  Max_Resp_Time    = ");
      Put (Integer (S.Max_Resp_Time));
      New_Line;
      Put ("Periodic  Total_Resp_Time  = ");
      Put (Integer (S.Total_Resp_Time));
      New_Line;
      Put ("Periodic  Job_Count        = ");
      Put (Integer (S.Job_Count));
      New_Line;
      Put ("Periodic  Missed_Deadlines = ");
      Put (Integer (S.Missed_Deadlines));
      New_Line;
   end;

   Error_Log.Close;

exception
   when E : others =>
      Put (Log, "exception " & Ada.Exceptions.Exception_Name (E));
      Put (Log, " in " & Test_Name & " at ");
      Put_Line (Log, Ada.Exceptions.Exception_Message (E));
      Error_Log.Close;
      raise;
end Test_Two;
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_two.adb,v 1.2 2008/11/21 23:10:36 baker Exp baker $
d31 2
a32 1
   Aperiodic_Tasks : array (AP_Range) of aliased Tasks.Task_Object;
d34 1
a34 12
   Aperiodic_Loads : array (AP_Range) of aliased Aperiodic_Workloads.Object;

   Aperiodic_Policies : array (AP_Range)
     of aliased Threads.Sched_DSS.Object;

   Aperiodic_Load_Parameters : array (AP_Range)
     of aliased Aperiodic_Workloads.Parameters :=
     (1 => (Mean_Interarrival_Time => 3.0, Mean_Execution_Time => 2.0));

   Aperiodic_Policy_Parameters : array (AP_Range)
     of Aperiodic_Server_Parameters.Parameters :=
     (1 => (Budget => 1, Budget_Interval => 2));
d40 3
a42 10
   Periodic_tasks : array (P_Range) of aliased Tasks.Task_Object;

   Periodic_Loads : array (P_Range) of aliased Periodic_Workloads.Object;

   Periodic_Load_Parameters : array (P_Range)
     of aliased Periodic_Workloads.Parameters :=
     (1 => (Period => 5, Deadline => 4, WCET => 2));

   Periodic_Policies : array (P_Range)
     of aliased Threads.Sched_EDF.Object;
d51 6
a56 1
   --  run just one simulation, for now
d61 17
a77 23
   for K in Aperiodic_Tasks'Range loop
      Aperiodic_Loads (K).Bind_Parms (Aperiodic_Load_Parameters (K));
      Aperiodic_Policies (K).Bind_Parms (Aperiodic_Policy_Parameters (K));
      Tasks.Bind
        (Aperiodic_Tasks (K)'Unchecked_Access,
         M => Aperiodic_Loads (K)'Unchecked_Access,
         P => Aperiodic_Policies (K)'Unchecked_Access,
         Name => 'A' & Trim (Integer'Image (K),Left));
   end loop;

   for K in Periodic_Tasks'Range loop
      Periodic_Loads (K).Bind_Parms (Periodic_Load_Parameters (K));
      Tasks.Bind
        (Periodic_Tasks (K)'Unchecked_Access,
         M => Periodic_Loads (K)'Unchecked_Access,
         P => Periodic_Policies (K)'Unchecked_Access,
         Name => 'P' & Trim (Integer'Image (K + Periodic_Tasks'Last), Left));
   end loop;

   --  start the pseudo-random number generator that
   --  determines the "random" events in the simulation

   Random_Tools.Start (3, 5, 7, 11, False);
d83 1
d87 33
a119 39
   for K in Aperiodic_Tasks'Range loop
      declare
         S : Stats.Data := Tasks.Get_Stats (Aperiodic_Tasks (K)'Unchecked_Access);
      begin
         --  just the basics, for now
         Put ("Max_Response_Time = ");
         Put (Integer (S.Max_Response_Time));
         New_Line;
         Put ("Total_Response_Time = ");
         Put (Integer (S.Total_Response_Time));
         New_Line;
         Put ("Job_Count = ");
         Put (Integer (S.Job_Count));
         New_Line;
         Put ("Missed_Deadlines = ");
         Put (Integer (S.Missed_Deadlines));
         New_Line;
      end;
   end loop;

   for K in Periodic_Tasks'Range loop
      declare
         S : Stats.Data := Tasks.Get_Stats (Periodic_Tasks (K)'Unchecked_Access);
      begin
         --  just the basics, for now
         Put ("Max_Response_Time = ");
         Put (Integer (S.Max_Response_Time));
         New_Line;
         Put ("Total_Response_Time = ");
         Put (Integer (S.Total_Response_Time));
         New_Line;
         Put ("Job_Count = ");
         Put (Integer (S.Job_Count));
         New_Line;
         Put ("Missed_Deadlines = ");
         Put (Integer (S.Missed_Deadlines));
         New_Line;
      end;
   end loop;
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_two.adb,v 1.1 2008/11/20 22:18:50 baker Exp baker $
d101 2
a102 1
   Simulator.Run (10);
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
-- $Id$
d3 2
a4 3
--  This is a secon test program for simulation packages.
--  It only tests one task, with one policy.
--  Anything more complicated would be more difficult to debug.
d10 2
d22 2
a23 3
-- with Periodic_Workloads;
-- with Report;
-- with Threads.Sched_EDF;
d25 1
a25 1
procedure Test_One is
d27 1
a27 1
   Aperiodic_Tasks : array (1 .. 1) of aliased Tasks.Task_Object;
d29 1
a29 1
   Aperiodic_Loads : array (1 .. 1) of aliased Aperiodic_Workloads.Object;
d31 5
a35 1
   Aperiodic_Policies : array (Aperiodic_Tasks'Range)
d38 1
a38 1
   Aperiodic_Load_Parameters : array (Aperiodic_Tasks'range)
d42 1
a42 1
   Aperiodic_Policy_Parameters : array (Aperiodic_Tasks'range)
d46 5
a50 1
--   Periodic_tasks : array (1 .. 1) of Tasks.Task_Object;
d52 1
a52 1
--   Periodic_Loads : array (1 .. 1) of Periodic_Workloads.Object;
d54 3
a56 3
--   Periodic_Load_Parameters : array (Periodic_Tasks'range)
--     of aliased Periodic_Workloads.Parameters :=
--     (1 => (Period => 5, Deadline => 4, WCET => 2));
d58 2
a59 1
-- ... incomplete for periodic case
d61 1
a61 1
   Test_Name : constant String := "test_one";
d66 1
a66 1
   Error_Log.Debug_Level := 10;
d68 1
a68 2
   --  run one simulation
   --  just one task, for now
d80 10
a89 1
         Name => Integer'Image (K));
d123 20
d148 1
a148 1
      Put (Log, " in Test_One at ");
d152 1
a152 1
end Test_one;
@
