head	1.6;
access;
symbols;
locks
	baker:1.6; strict;
comment	@-- @;


1.6
date	2008.11.23.21.33.20;	author baker;	state Exp;
branches;
next	1.5;

1.5
date	2008.11.23.01.54.28;	author baker;	state Exp;
branches;
next	1.4;

1.4
date	2008.11.21.23.10.36;	author baker;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.20.22.18.50;	author baker;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.20.18.49.43;	author baker;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.19.14.25.53;	author baker;	state Exp;
branches;
next	;


desc
@@


1.6
log
@*** empty log message ***
@
text
@-- $Id: test_one.adb,v 1.5 2008/11/23 01:54:28 baker Exp baker $

--  This is a first test program for simulation packages.
--  It only tests one task, with one policy.
--  Anything more complicated would be more difficult to debug.

with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;
with Error_Log; use Error_Log;
with Tasks;
with Simulator;
with Threads;
with Threads.Sched_DSS;
with Workload_Models;
with Aperiodic_Server_Parameters; use Aperiodic_Server_Parameters;
with Aperiodic_Workloads;
with Random_Tools;
with Stats;

procedure Test_One is

   Aperiodic_Task : aliased Tasks.Task_Object;

   Aperiodic_Load : aliased Aperiodic_Workloads.Object;

   Aperiodic_Policy : aliased Threads.Sched_DSS.Object;

   Test_Name : constant String := "test_one";

begin

   Error_Log.Open (Test_Name);
   Error_Log.Debug_Level := 10;

   --  start the pseudo-random number generator that
   --  determines the "random" events in the simulation

   Random_Tools.Start (3, 5, 7, 11, False);

   Simulator.Initialize;

   --  set up one workload model object and one
   --  scheduling policy object per aperiodic task

   Aperiodic_Load.Bind_Parms
     ((Mean_Interarrival_Time => 3.0, Mean_Execution_Time => 2.0));
   Aperiodic_Policy.Bind_Parms
     ((Budget => 1, Budget_Interval => 2));
   Tasks.Bind
     (Aperiodic_Task'Unchecked_Access,
      M => Aperiodic_Load'Unchecked_Access,
      P => Aperiodic_Policy'Unchecked_Access,
      Name => "A1");

   --  initialize/reset the tasks,
   --  and thereby everything that depends on them

   Tasks.Initialize;

   --  run one simulation

   Simulator.Run (Normal_Stop_Time => 10,
                  Latest_Stop_Time => 20);

   declare
      S : Stats.Data := Tasks.Get_Stats (Aperiodic_Task);
   begin
      Put ("Max_Resp_Time    = ");
      Put (Integer (S.Max_Resp_Time));
      New_Line;
      Put ("Total_Resp_Time  = ");
      Put (Integer (S.Total_Resp_Time));
      New_Line;
      Put ("Job_Count        = ");
      Put (Integer (S.Job_Count));
      New_Line;
      Put ("Missed_Deadlines = ");
      Put (Integer (S.Missed_Deadlines));
      New_Line;
   end;

   Error_Log.Close;

exception
   when E : others =>
      Put (Log, "exception " & Ada.Exceptions.Exception_Name (E));
      Put (Log, " in " & Test_Name & " at ");
      Put_Line (Log, Ada.Exceptions.Exception_Message (E));
      Error_Log.Close;
      raise;
end Test_one;
@


1.5
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.4 2008/11/21 23:10:36 baker Exp baker $
d24 1
a24 1
   Aperiodic_Tasks : array (1 .. 1) of aliased Tasks.Task_Object;
d26 1
a26 1
   Aperiodic_Loads : array (1 .. 1) of aliased Aperiodic_Workloads.Object;
d28 1
a28 10
   Aperiodic_Policies : array (Aperiodic_Tasks'Range)
     of aliased Threads.Sched_DSS.Object;

   Aperiodic_Load_Parameters : array (Aperiodic_Tasks'range)
     of aliased Aperiodic_Workloads.Parameters :=
     (1 => (Mean_Interarrival_Time => 3.0, Mean_Execution_Time => 2.0));

   Aperiodic_Policy_Parameters : array (Aperiodic_Tasks'range)
     of Aperiodic_Server_Parameters.Parameters :=
     (1 => (Budget => 1, Budget_Interval => 2));
d37 6
a42 2
   --  run one simulation
   --  just one task, for now
d47 9
a55 14
   for K in Aperiodic_Tasks'Range loop
      Aperiodic_Loads (K).Bind_Parms (Aperiodic_Load_Parameters (K));
      Aperiodic_Policies (K).Bind_Parms (Aperiodic_Policy_Parameters (K));
      Tasks.Bind
        (Aperiodic_Tasks (K)'Unchecked_Access,
         M => Aperiodic_Loads (K)'Unchecked_Access,
         P => Aperiodic_Policies (K)'Unchecked_Access,
         Name => Integer'Image (K));
   end loop;

   --  start the pseudo-random number generator that
   --  determines the "random" events in the simulation

   Random_Tools.Start (3, 5, 7, 11, False);
d61 3
d67 16
a82 19
   for K in Aperiodic_Tasks'Range loop
      declare
         S : Stats.Data := Tasks.Get_Stats (Aperiodic_Tasks (K)'Unchecked_Access);
      begin
         --  just the basics, for now
         Put ("Max_Response_Time = ");
         Put (Integer (S.Max_Response_Time));
         New_Line;
         Put ("Total_Response_Time = ");
         Put (Integer (S.Total_Response_Time));
         New_Line;
         Put ("Job_Count = ");
         Put (Integer (S.Job_Count));
         New_Line;
         Put ("Missed_Deadlines = ");
         Put (Integer (S.Missed_Deadlines));
         New_Line;
      end;
   end loop;
@


1.4
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.3 2008/11/20 22:18:50 baker Exp baker $
d71 2
a72 1
   Simulator.Run (10);
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.2 2008/11/20 18:49:43 baker Exp baker $
d98 1
a98 1
      Put (Log, " in Test_One at ");
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.1 2008/11/19 14:25:53 baker Exp baker $
d3 3
a5 1
-- a first test program for simulation packages
d21 1
a21 3
-- with Periodic_Workloads;
-- with Report;
-- with Threads.Sched_EDF;
a38 10
--   Periodic_tasks : array (1 .. 1) of Tasks.Task_Object;

--   Periodic_Loads : array (1 .. 1) of Periodic_Workloads.Object;

--   Periodic_Load_Parameters : array (Periodic_Tasks'range)
--     of aliased Periodic_Workloads.Parameters :=
--     (1 => (Period => 5, Deadline => 4, WCET => 2));

-- ... incomplete for periodic case

@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.1 2008/11/16 13:36:54 baker Exp baker $
a13 2
with Aperiodic_Workloads;
with Aperiodic_Server_Parameters;
d15 1
d17 4
a20 1
with Periodic_Workloads;
a21 1
with Stats;
d23 9
a31 7
   package Sim renames Simulator;
--   use type Aperiodic_Workloads.Parameters;
--   use type Aperiodic_Server_Parameters.Parameters;

   Aperiodic_Tasks : array (1 .. 1) of Tasks.Task_Object;
   Aperiodic_Loads : array (1 .. 1) of Aperiodic_Workloads.Object;
   Aperiodic_Workload_Parameters : array (Aperiodic_Tasks'range)
d34 1
d36 4
a39 9
     of aliased Aperiodic_Server_Parameters.Parameters :=
     (Threads.Scheduling_Parameters.Object with
      (Budget => 1, Budget_Interval => 2));

   Periodic_tasks : array (1 .. 1) of Tasks.Task_Object;
   Periodic_Workloads : array (1 .. 1) of Periodic_Workloads.Object;
   Periodic_Workload_Parameters : array (Periodic_Tasks'range)
     of aliased Periodic_Workloads.Parameters :=
     ((Period => 5, Deadline => 4, WCET => 2));
d41 9
a49 2
   DSS_Policy : Threads.Sched_DSS.Object;
--   EDF_Policy : Threads.Sched_EDF.Object;
d53 2
a54 1
   Error_Log.Open ("test_one");
d59 2
a60 4
   --  initialize one workload model object per task
   for K in Aperiodic_Tasks'Range loop
      Aperiodic_Loads (K).Init (Aperiodic_Load_Parameters (K));
   end loop;
a61 1
   --  initialize one thread scheduling policy object per task
d63 7
a69 1
      Aperiodic_Policies (K).Init (Aperiodic_Policy_Parameters (K));
d72 2
d75 1
a75 4
  --   ....Working Here... consider how to specify (aperiodic) scheduling policy
  --  parameters.  It seems we need to pass them to the task, with the policy.
  --  Also consider passing workload model to task, rather than attaching it to the workload.
  --  It will then need to be passed as a reference.
d77 2
a78 1
   for K in Aperiodic_Tasks'Range loop
d80 2
a81 2
      Aperiodic_Loads (K).Init (Aperiodic_Load_Parameters (K));
   end loop;
a83 5
      Aperiodic_Tasks (K).Init
       (Aperiodic_Workload_Models (K)'Unchecked_Access);
   end loop;
   Sim.Run;
   for K in Aperiodic_Tasks'Range loop
d85 1
a85 1
         S : Stats.Data := Aperiodic_Tasks (K).Get_Stats;
d98 1
a98 1
         Put (Integer (S.Max_Missed_Deadlines));
d107 3
a109 2
      Put ("exception " & Ada.Exceptions.Exception_Name (E)); New_Line;
      Put (Ada.Exceptions.Exception_Message (E));Put ("in Test_One"); New_Line;
@
