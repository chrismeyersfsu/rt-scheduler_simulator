head	1.4;
access;
symbols;
locks
	baker:1.4; strict;
comment	@-- @;


1.4
date	2008.11.23.21.33.20;	author baker;	state Exp;
branches;
next	1.3;

1.3
date	2008.11.23.01.54.28;	author baker;	state Exp;
branches;
next	1.2;

1.2
date	2008.11.21.23.10.36;	author baker;	state Exp;
branches;
next	1.1;

1.1
date	2008.11.20.22.18.50;	author baker;	state Exp;
branches;
next	;


desc
@@


1.4
log
@*** empty log message ***
@
text
@-- $Id: test_three.adb,v 1.3 2008/11/23 01:54:28 baker Exp baker $

--  This is a third test program for simulation packages.
--  It tests three tasks, with one policy.

with Ada.Exceptions;
with Ada.Text_IO; use Ada.Text_IO;
with Ada.Integer_Text_IO; use Ada.Integer_Text_IO;
with Ada.Float_Text_IO; use Ada.Float_Text_IO;
with Ada.Strings; use Ada.Strings;
with Ada.Strings.Fixed; use Ada.Strings.Fixed;
with Error_Log; use Error_Log;
with Tasks;
with Simulator;
with Threads;
with Threads.Sched_DSS;
with Workload_Models;
with Aperiodic_Server_Parameters; use Aperiodic_Server_Parameters;
with Aperiodic_Workloads;
with Random_Tools;
with Stats;
with Periodic_Workloads;
with Threads.Sched_EDF;
with Virtual_Times; use Virtual_Times;

procedure Test_Three is

   --  Aperiodic tasks

   Aperiodic_Task : aliased Tasks.Task_Object;

   Aperiodic_Load : aliased Aperiodic_Workloads.Object;

   Aperiodic_Policy : aliased Threads.Sched_DSS.Object;

   --  Periodic tasks

   subtype P_Range is Integer range 1 .. 1;

   Periodic_tasks : array (P_Range) of aliased Tasks.Task_Object;

   Periodic_Loads : array (P_Range) of aliased Periodic_Workloads.Object;

   Periodic_Load_Parameters : array (1 .. 2)
     of aliased Periodic_Workloads.Parameters :=
     ((Period => 25, Deadline => 25, WCET => 5),
      (Period => 35, Deadline => 35, WCET => 4)
     );

   Periodic_Policies : array (P_Range)
     of aliased Threads.Sched_EDF.Object;

   Test_Name : constant String := "test_three";

begin

   Error_Log.Open (Test_Name);
   Error_Log.Debug_Level := 10;

   --  set up one workload model object and one
   --  scheduling policy object per aperiodic task

   for K in Periodic_Tasks'Range loop
      Periodic_Loads (K).Bind_Parms (Periodic_Load_Parameters (K));
      Tasks.Bind
        (Periodic_Tasks (K)'Unchecked_Access,
         M => Periodic_Loads (K)'Unchecked_Access,
         P => Periodic_Policies (K)'Unchecked_Access,
         Name => 'P' & Trim (Integer'Image (K + 1), Left));
   end loop;

   --  run four simulations, for different aperiodic load levels

   Aperiodic_Load.Bind_Parms
     ((Mean_Interarrival_Time => 5.0, Mean_Execution_Time => 2.0));

   for I in 1 .. 4 loop

      New_Line;
      Put ("with aperiodic utilization ");
      Put (Float (I) / 5.0, 1,3,0);
      New_Line;

      Random_Tools.Start (3, 5, 7, 11, False);

      Simulator.Initialize;

      --  initialize/reset the tasks,
      --  and thereby everything that depends on them

      Aperiodic_Policy.Bind_Parms
         ((Budget => Time (I * 10),
           Budget_Interval => Time (I * 20)));

      Tasks.Bind
        (Aperiodic_Task'Unchecked_Access,
         M => Aperiodic_Load'Unchecked_Access,
         P => Aperiodic_Policy'Unchecked_Access,
         Name => 'A' & "1");

      --  start the pseudo-random number generator that
      --  determines the "random" events in the simulation

      Trace (3, "initializing tasks");
      Tasks.Initialize;

      Trace (3, "starting simulation");
      Simulator.Run (Normal_Stop_Time => 1000,
                     Latest_Stop_Time => 2000);

      declare
         S : Stats.Data := Tasks.Get_Stats (Aperiodic_Task);
      begin
         --  just the basics, for now
         Put (Tasks.Name (Aperiodic_Task)
                & "Max_Resp_Time         = ");
         Put (Integer (S.Max_Resp_Time));
         New_Line;
         Put (Tasks.Name (Aperiodic_Task)
                & "Average response time = ");
         Put (Float (S.Total_Resp_Time) / Float (S.Job_Count), 7, 3, 0);
         New_Line;
      end;

      for K in Periodic_Tasks'Range loop
         declare
            S : Stats.Data := Tasks.Get_Stats (Periodic_Tasks (K));
         begin
            Put (Tasks.Name(Periodic_Tasks (K))
                & "Max_Resp_Time         = ");
            Put (Integer (S.Max_Resp_Time));
            New_Line;
            Put (Tasks.Name (Periodic_Tasks (K))
                & "Missed_Deadlines      = ");
            Put (Integer (S.Missed_Deadlines));
            New_Line;
         end;
      end loop;

   end loop;

   Error_Log.Close;

exception
   when E : others =>
      Put (Log, "exception " & Ada.Exceptions.Exception_Name (E));
      Put (Log, " in " & Test_Name & " at ");
      Put_Line (Log, Ada.Exceptions.Exception_Message (E));
      Error_Log.Close;
      raise;
end Test_Three;
@


1.3
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_three.adb,v 1.2 2008/11/21 23:10:36 baker Exp baker $
a78 2
      Put ("Testing aperiodic utilization ");
      Put (Float (I) / 5.0);
d80 10
a103 5
      Random_Tools.Start (3, 5, 7, 11, False);

      --  initialize/reset the tasks,
      --  and thereby everything that depends on them

d107 1
a110 3
      --  ??? need to write a decent report-generation package

      Put_Line ("Aperiodic Task");
d112 1
a112 1
         S : Stats.Data := Tasks.Get_Stats (Aperiodic_Task'Unchecked_Access);
d115 3
a117 2
         Put ("Max_Response_Time = ");
         Put (Integer (S.Max_Response_Time));
d119 3
a121 2
         Put ("Average response time = ");
         Put (Float (S.Total_Response_Time) / Float (S.Job_Count));
a124 1
      Put_Line ("Periodic Tasks");
d127 1
a127 1
            S : Stats.Data := Tasks.Get_Stats (Periodic_Tasks (K)'Unchecked_Access);
d129 3
a131 2
            Put ("Max_Response_Time = ");
            Put (Integer (S.Max_Response_Time));
d133 2
a134 1
            Put ("Missed_Deadlines = ");
@


1.2
log
@*** empty log message ***
@
text
@d1 1
a1 1
-- $Id: test_two.adb,v 1.1 2008/11/20 22:18:50 baker Exp baker $
a35 7
   Aperiodic_Load_Parameters : aliased
     Aperiodic_Workloads.Parameters :=
     (Mean_Interarrival_Time => 5.0, Mean_Execution_Time => 2.0);

   Aperiodic_Policy_Parameters :
      Aperiodic_Server_Parameters.Parameters;

d74 2
a75 2

   Aperiodic_Load.Bind_Parms (Aperiodic_Load_Parameters);
a82 3
      Aperiodic_Policy_Parameters :=
        (Budget => Time (I),
         Budget_Interval => Time (I * 5));
d84 3
a86 1
         (Aperiodic_Policy_Parameters);
d101 1
d103 3
a105 1
      Simulator.Run (1000);
d135 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
-- $Id: test_one.adb,v 1.2 2008/11/20 18:49:43 baker Exp baker $
d3 2
a4 3
--  This is a first test program for simulation packages.
--  It only tests one task, with one policy.
--  Anything more complicated would be more difficult to debug.
d10 2
d22 3
a24 4
-- with Periodic_Workloads;
-- with Report;
-- with Threads.Sched_EDF;
procedure Test_One is
d26 1
a26 1
   Aperiodic_Tasks : array (1 .. 1) of aliased Tasks.Task_Object;
d28 1
a28 1
   Aperiodic_Loads : array (1 .. 1) of aliased Aperiodic_Workloads.Object;
d30 1
a30 2
   Aperiodic_Policies : array (Aperiodic_Tasks'Range)
     of aliased Threads.Sched_DSS.Object;
d32 1
a32 3
   Aperiodic_Load_Parameters : array (Aperiodic_Tasks'range)
     of aliased Aperiodic_Workloads.Parameters :=
     (1 => (Mean_Interarrival_Time => 3.0, Mean_Execution_Time => 2.0));
d34 1
a34 3
   Aperiodic_Policy_Parameters : array (Aperiodic_Tasks'range)
     of Aperiodic_Server_Parameters.Parameters :=
     (1 => (Budget => 1, Budget_Interval => 2));
d36 3
a38 1
--   Periodic_tasks : array (1 .. 1) of Tasks.Task_Object;
d40 2
a41 1
--   Periodic_Loads : array (1 .. 1) of Periodic_Workloads.Object;
d43 1
a43 3
--   Periodic_Load_Parameters : array (Periodic_Tasks'range)
--     of aliased Periodic_Workloads.Parameters :=
--     (1 => (Period => 5, Deadline => 4, WCET => 2));
d45 1
a45 1
-- ... incomplete for periodic case
d47 14
a60 1
   Test_Name : constant String := "test_one";
a66 3
   --  run one simulation
   --  just one task, for now

d70 2
a71 3
   for K in Aperiodic_Tasks'Range loop
      Aperiodic_Loads (K).Bind_Parms (Aperiodic_Load_Parameters (K));
      Aperiodic_Policies (K).Bind_Parms (Aperiodic_Policy_Parameters (K));
d73 4
a76 4
        (Aperiodic_Tasks (K)'Unchecked_Access,
         M => Aperiodic_Loads (K)'Unchecked_Access,
         P => Aperiodic_Policies (K)'Unchecked_Access,
         Name => Integer'Image (K));
d79 6
a84 2
   --  start the pseudo-random number generator that
   --  determines the "random" events in the simulation
d86 3
a88 1
   Random_Tools.Start (3, 5, 7, 11, False);
d90 18
a107 2
   --  initialize/reset the tasks,
   --  and thereby everything that depends on them
d109 2
a110 2
   Tasks.Initialize;
   Simulator.Run (10);
d112 3
a114 1
   for K in Aperiodic_Tasks'Range loop
d116 1
a116 1
         S : Stats.Data := Tasks.Get_Stats (Aperiodic_Tasks (K)'Unchecked_Access);
d122 2
a123 8
         Put ("Total_Response_Time = ");
         Put (Integer (S.Total_Response_Time));
         New_Line;
         Put ("Job_Count = ");
         Put (Integer (S.Job_Count));
         New_Line;
         Put ("Missed_Deadlines = ");
         Put (Integer (S.Missed_Deadlines));
d126 14
d147 1
a147 1
      Put (Log, " in Test_One at ");
d151 1
a151 1
end Test_one;
@
